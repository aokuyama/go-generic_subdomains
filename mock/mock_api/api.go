// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package mock_api is a generated GoMock package.
package mock_api

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockApi is a mock of Api interface.
type MockApi struct {
	ctrl     *gomock.Controller
	recorder *MockApiMockRecorder
}

// MockApiMockRecorder is the mock recorder for MockApi.
type MockApiMockRecorder struct {
	mock *MockApi
}

// NewMockApi creates a new mock instance.
func NewMockApi(ctrl *gomock.Controller) *MockApi {
	mock := &MockApi{ctrl: ctrl}
	mock.recorder = &MockApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApi) EXPECT() *MockApiMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockApi) Do(body interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", body)
	ret0, _ := ret[0].(error)
	return ret0
}

// Do indicates an expected call of Do.
func (mr *MockApiMockRecorder) Do(body interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockApi)(nil).Do), body)
}

// GetResult mocks base method.
func (m *MockApi) GetResult() *[]byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResult")
	ret0, _ := ret[0].(*[]byte)
	return ret0
}

// GetResult indicates an expected call of GetResult.
func (mr *MockApiMockRecorder) GetResult() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResult", reflect.TypeOf((*MockApi)(nil).GetResult))
}

// IsCompleted mocks base method.
func (m *MockApi) IsCompleted() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCompleted")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsCompleted indicates an expected call of IsCompleted.
func (mr *MockApiMockRecorder) IsCompleted() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCompleted", reflect.TypeOf((*MockApi)(nil).IsCompleted))
}
